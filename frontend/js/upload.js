/**
 * SANTOO - Upload Module
 * Handles video upload, processing, and file management
 */

class UploadManager {\n  constructor() {\n    this.maxFileSize = 100 * 1024 * 1024; // 100MB\n    this.allowedTypes = ['video/mp4', 'video/mov', 'video/webm', 'video/avi'];\n    this.currentUpload = null;\n    \n    this.init();\n  }\n\n  /**\n   * Initialize upload manager\n   */\n  init() {\n    this.setupEventListeners();\n    console.log('📤 Upload Manager inicializado');\n  }\n\n  /**\n   * Setup event listeners for upload functionality\n   */\n  setupEventListeners() {\n    // File input change\n    const fileInput = document.getElementById('videoFileInput');\n    if (fileInput) {\n      fileInput.addEventListener('change', (e) => {\n        if (e.target.files.length > 0) {\n          this.handleFileSelect(e.target.files[0]);\n        }\n      });\n    }\n\n    // Select video button\n    const selectBtn = document.getElementById('selectVideoBtn');\n    if (selectBtn) {\n      selectBtn.addEventListener('click', () => {\n        fileInput?.click();\n      });\n    }\n\n    // Upload zone click\n    const uploadZone = document.getElementById('uploadZone');\n    if (uploadZone) {\n      uploadZone.addEventListener('click', (e) => {\n        if (e.target === uploadZone || uploadZone.contains(e.target)) {\n          fileInput?.click();\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle file selection\n   */\n  async handleFileSelect(file) {\n    console.log('Arquivo selecionado:', file.name);\n    \n    // Validate file\n    const validation = this.validateFile(file);\n    if (!validation.valid) {\n      window.santooToast.error(validation.message);\n      return;\n    }\n\n    // Show loading\n    window.santooLoading.show('Processando vídeo...');\n    \n    try {\n      // Process file\n      await this.processFile(file);\n      \n      // Show upload form\n      this.showUploadForm(file);\n      \n    } catch (error) {\n      console.error('Erro ao processar arquivo:', error);\n      window.santooToast.error('Erro ao processar o vídeo. Tente novamente.');\n    } finally {\n      window.santooLoading.hide();\n    }\n  }\n\n  /**\n   * Validate selected file\n   */\n  validateFile(file) {\n    // Check if file exists\n    if (!file) {\n      return { valid: false, message: 'Nenhum arquivo selecionado' };\n    }\n\n    // Check file type\n    if (!this.allowedTypes.includes(file.type)) {\n      return { \n        valid: false, \n        message: `Tipo de arquivo não suportado. Use: ${this.getAllowedTypesText()}` \n      };\n    }\n\n    // Check file size\n    if (file.size > this.maxFileSize) {\n      const maxSizeMB = Math.round(this.maxFileSize / (1024 * 1024));\n      return { \n        valid: false, \n        message: `Arquivo muito grande. Tamanho máximo: ${maxSizeMB}MB` \n      };\n    }\n\n    // Check file name\n    if (file.name.length > 255) {\n      return { valid: false, message: 'Nome do arquivo muito longo' };\n    }\n\n    return { valid: true, message: 'Arquivo válido' };\n  }\n\n  /**\n   * Process selected file\n   */\n  async processFile(file) {\n    return new Promise((resolve, reject) => {\n      const video = document.createElement('video');\n      \n      video.onloadedmetadata = () => {\n        // Get video metadata\n        const metadata = {\n          duration: video.duration,\n          width: video.videoWidth,\n          height: video.videoHeight,\n          size: file.size,\n          type: file.type,\n          name: file.name\n        };\n        \n        console.log('Metadados do vídeo:', metadata);\n        \n        // Store metadata for upload\n        this.currentUpload = {\n          file: file,\n          metadata: metadata,\n          preview: URL.createObjectURL(file)\n        };\n        \n        resolve(metadata);\n      };\n      \n      video.onerror = () => {\n        reject(new Error('Não foi possível ler o arquivo de vídeo'));\n      };\n      \n      video.src = URL.createObjectURL(file);\n    });\n  }\n\n  /**\n   * Show upload form with file preview\n   */\n  showUploadForm(file) {\n    const uploadForm = document.getElementById('uploadForm');\n    const uploadZone = document.getElementById('uploadZone');\n    \n    if (!uploadForm || !this.currentUpload) return;\n\n    // Hide upload zone\n    if (uploadZone) {\n      uploadZone.style.display = 'none';\n    }\n\n    // Show and populate upload form\n    uploadForm.style.display = 'block';\n    uploadForm.innerHTML = this.generateUploadFormHTML();\n    \n    // Setup form event listeners\n    this.setupFormListeners();\n    \n    console.log('Formulário de upload exibido');\n  }\n\n  /**\n   * Generate upload form HTML\n   */\n  generateUploadFormHTML() {\n    const { metadata, preview } = this.currentUpload;\n    \n    return `\n      <div class=\"upload-preview\">\n        <video controls style=\"width: 100%; max-height: 300px; border-radius: var(--radius-lg); background: var(--color-bg-primary);\">\n          <source src=\"${preview}\" type=\"${metadata.type}\">\n          Seu navegador não suporta o elemento video.\n        </video>\n        <div style=\"margin-top: 1rem; display: flex; justify-content: space-between; font-size: var(--font-size-sm); color: var(--color-text-secondary);\">\n          <span>📹 ${this.formatDuration(metadata.duration)}</span>\n          <span>📏 ${metadata.width}x${metadata.height}</span>\n          <span>💾 ${this.formatFileSize(metadata.size)}</span>\n        </div>\n      </div>\n      \n      <form data-type=\"upload\" class=\"upload-details-form\">\n        <div class=\"form-group\">\n          <label class=\"form-label\" for=\"videoTitle\">Título do Vídeo *</label>\n          <input \n            type=\"text\" \n            id=\"videoTitle\" \n            name=\"title\" \n            class=\"form-input\" \n            placeholder=\"Dê um título inspirador ao seu vídeo\"\n            maxlength=\"100\"\n            required\n          >\n          <small style=\"color: var(--color-text-tertiary); font-size: var(--font-size-xs);\">0/100 caracteres</small>\n        </div>\n        \n        <div class=\"form-group\">\n          <label class=\"form-label\" for=\"videoDescription\">Descrição</label>\n          <textarea \n            id=\"videoDescription\" \n            name=\"description\" \n            class=\"form-input form-textarea\" \n            placeholder=\"Descreva sua mensagem, adicione versículos ou contexto...\"\n            maxlength=\"500\"\n            rows=\"4\"\n          ></textarea>\n          <small style=\"color: var(--color-text-tertiary); font-size: var(--font-size-xs);\">0/500 caracteres</small>\n        </div>\n        \n        <div class=\"form-group\">\n          <label class=\"form-label\" for=\"videoCategory\">Categoria *</label>\n          <select id=\"videoCategory\" name=\"category\" class=\"form-input form-select\" required>\n            <option value=\"\">Selecione uma categoria</option>\n            <option value=\"pregacao\">🎤 Pregação</option>\n            <option value=\"musica\">🎵 Música</option>\n            <option value=\"testemunho\">💬 Testemunho</option>\n            <option value=\"estudo\">📖 Estudo Bíblico</option>\n            <option value=\"oracao\">🙏 Oração</option>\n            <option value=\"jovens\">👥 Jovens</option>\n            <option value=\"infantil\">👶 Infantil</option>\n            <option value=\"outros\">📂 Outros</option>\n          </select>\n        </div>\n        \n        <div class=\"form-group\">\n          <label class=\"form-label\" for=\"videoTags\">Tags</label>\n          <input \n            type=\"text\" \n            id=\"videoTags\" \n            name=\"tags\" \n            class=\"form-input\" \n            placeholder=\"jesus, fé, esperança, amor (separadas por vírgula)\"\n          >\n          <small style=\"color: var(--color-text-tertiary); font-size: var(--font-size-xs);\">Máximo 10 tags</small>\n        </div>\n        \n        <div class=\"form-group\">\n          <label class=\"form-label\">Configurações</label>\n          <div style=\"display: flex; flex-direction: column; gap: 0.5rem;\">\n            <label style=\"display: flex; align-items: center; gap: 0.5rem; font-weight: normal;\">\n              <input type=\"checkbox\" name=\"isPublic\" checked>\n              <span>Vídeo público (todos podem ver)</span>\n            </label>\n            <label style=\"display: flex; align-items: center; gap: 0.5rem; font-weight: normal;\">\n              <input type=\"checkbox\" name=\"allowComments\" checked>\n              <span>Permitir comentários</span>\n            </label>\n          </div>\n        </div>\n        \n        <div class=\"form-group\" style=\"display: flex; gap: 1rem; flex-wrap: wrap;\">\n          <button type=\"button\" class=\"btn btn-secondary\" id=\"cancelUploadBtn\">\n            Cancelar\n          </button>\n          <button type=\"submit\" class=\"btn btn-primary\" id=\"publishBtn\" style=\"flex: 1;\">\n            📤 Publicar Vídeo\n          </button>\n        </div>\n      </form>\n    `;\n  }\n\n  /**\n   * Setup form event listeners\n   */\n  setupFormListeners() {\n    // Character counters\n    this.setupCharacterCounters();\n    \n    // Cancel button\n    const cancelBtn = document.getElementById('cancelUploadBtn');\n    if (cancelBtn) {\n      cancelBtn.addEventListener('click', () => this.cancelUpload());\n    }\n    \n    // Form submission will be handled by main app\n    console.log('Listeners do formulário configurados');\n  }\n\n  /**\n   * Setup character counters for text inputs\n   */\n  setupCharacterCounters() {\n    const titleInput = document.getElementById('videoTitle');\n    const descriptionInput = document.getElementById('videoDescription');\n    \n    if (titleInput) {\n      const updateTitleCounter = () => {\n        const counter = titleInput.parentNode.querySelector('small');\n        if (counter) {\n          const count = titleInput.value.length;\n          counter.textContent = `${count}/100 caracteres`;\n          counter.style.color = count > 90 ? 'var(--color-warning)' : 'var(--color-text-tertiary)';\n        }\n      };\n      \n      titleInput.addEventListener('input', updateTitleCounter);\n      updateTitleCounter();\n    }\n    \n    if (descriptionInput) {\n      const updateDescCounter = () => {\n        const counter = descriptionInput.parentNode.querySelector('small');\n        if (counter) {\n          const count = descriptionInput.value.length;\n          counter.textContent = `${count}/500 caracteres`;\n          counter.style.color = count > 450 ? 'var(--color-warning)' : 'var(--color-text-tertiary)';\n        }\n      };\n      \n      descriptionInput.addEventListener('input', updateDescCounter);\n      updateDescCounter();\n    }\n  }\n\n  /**\n   * Handle upload form submission\n   */\n  async handleUpload(formData) {\n    if (!this.currentUpload) {\n      window.santooToast.error('Nenhum arquivo selecionado');\n      return { success: false };\n    }\n\n    // Check authentication\n    if (!window.santooAuth.isAuthenticated()) {\n      window.santooToast.error('Você precisa estar logado para publicar vídeos');\n      return { success: false };\n    }\n\n    try {\n      console.log('Iniciando upload...', formData);\n      \n      // Show upload progress\n      window.santooLoading.show('Fazendo upload do vídeo...');\n      \n      // Simulate upload progress\n      await this.simulateUploadProgress();\n      \n      // Create video data\n      const videoData = this.prepareVideoData(formData);\n      \n      // Simulate API upload\n      const result = await this.uploadToAPI(videoData);\n      \n      if (result.success) {\n        window.santooToast.success('Vídeo publicado com sucesso! 🎉');\n        this.resetUploadForm();\n        \n        // Navigate to home or profile\n        if (window.santooApp) {\n          window.santooApp.navigateTo('home');\n        }\n        \n        return { success: true, videoId: result.videoId };\n      } else {\n        throw new Error(result.message || 'Erro no upload');\n      }\n      \n    } catch (error) {\n      console.error('Erro no upload:', error);\n      window.santooToast.error('Erro ao publicar vídeo: ' + error.message);\n      return { success: false, error: error.message };\n    } finally {\n      window.santooLoading.hide();\n    }\n  }\n\n  /**\n   * Prepare video data for upload\n   */\n  prepareVideoData(formData) {\n    const tags = formData.get('tags') || '';\n    \n    return {\n      file: this.currentUpload.file,\n      title: formData.get('title'),\n      description: formData.get('description') || '',\n      category: formData.get('category'),\n      tags: tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0),\n      isPublic: formData.get('isPublic') === 'on',\n      allowComments: formData.get('allowComments') === 'on',\n      metadata: this.currentUpload.metadata\n    };\n  }\n\n  /**\n   * Simulate upload progress\n   */\n  async simulateUploadProgress() {\n    const steps = [\n      'Validando vídeo...',\n      'Fazendo upload...',\n      'Processando vídeo...',\n      'Gerando thumbnail...',\n      'Finalizando publicação...'\n    ];\n    \n    for (let i = 0; i < steps.length; i++) {\n      window.santooLoading.updateMessage(steps[i]);\n      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n    }\n  }\n\n  /**\n   * Upload to API (mocked for development)\n   */\n  async uploadToAPI(videoData) {\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Mock successful response\n    return {\n      success: true,\n      videoId: 'video_' + Date.now(),\n      message: 'Vídeo publicado com sucesso'\n    };\n  }\n\n  /**\n   * Cancel upload and reset form\n   */\n  cancelUpload() {\n    const confirmCancel = confirm('Tem certeza que deseja cancelar? O vídeo será perdido.');\n    \n    if (confirmCancel) {\n      this.resetUploadForm();\n      window.santooToast.info('Upload cancelado');\n    }\n  }\n\n  /**\n   * Reset upload form\n   */\n  resetUploadForm() {\n    // Clear current upload\n    if (this.currentUpload && this.currentUpload.preview) {\n      URL.revokeObjectURL(this.currentUpload.preview);\n    }\n    this.currentUpload = null;\n    \n    // Reset UI\n    const uploadZone = document.getElementById('uploadZone');\n    const uploadForm = document.getElementById('uploadForm');\n    const fileInput = document.getElementById('videoFileInput');\n    \n    if (uploadZone) uploadZone.style.display = 'block';\n    if (uploadForm) uploadForm.style.display = 'none';\n    if (fileInput) fileInput.value = '';\n    \n    console.log('Formulário de upload resetado');\n  }\n\n  /**\n   * Get allowed file types as readable text\n   */\n  getAllowedTypesText() {\n    return this.allowedTypes.map(type => type.split('/')[1].toUpperCase()).join(', ');\n  }\n\n  /**\n   * Format file size\n   */\n  formatFileSize(bytes) {\n    return window.SantooUtils ? window.SantooUtils.formatFileSize(bytes) : `${Math.round(bytes / 1024)} KB`;\n  }\n\n  /**\n   * Format duration\n   */\n  formatDuration(seconds) {\n    return window.SantooUtils ? window.SantooUtils.StringUtils.formatDuration(seconds) : `${Math.round(seconds)}s`;\n  }\n}\n\n// Create global upload manager instance\nwindow.santooUpload = new UploadManager();\n\nconsole.log('📤 Santoo Upload carregado');"